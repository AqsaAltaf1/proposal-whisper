import jsPDF from 'jspdf';

interface Milestone {
  title: string;
  duration: string;
  deliverables: string[];
}

interface PricingTier {
  price: string;
  features: string[];
}

interface ProposalPDFData {
  jobTitle: string;
  coverLetter: string;
  milestones: Milestone[];
  pricing: {
    basic: PricingTier;
    standard: PricingTier;
    premium: PricingTier;
  };
  questions: string[];
  createdAt: string;
  freelancerName?: string;
}

export const exportProposalToPDF = (proposal: ProposalPDFData) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addText = (text: string, fontSize: number = 10, isBold: boolean = false, color: string = '#000000') => {
    pdf.setFontSize(fontSize);
    pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
    pdf.setTextColor(color);
    
    const lines = pdf.splitTextToSize(text, contentWidth);
    
    // Check if we need a new page
    if (yPosition + (lines.length * fontSize * 0.5) > pageHeight - margin) {
      pdf.addPage();
      yPosition = margin;
    }
    
    pdf.text(lines, margin, yPosition);
    yPosition += lines.length * fontSize * 0.5 + 5;
    
    return yPosition;
  };

  // Add header with branding
  const addHeader = () => {
    pdf.setFillColor(40, 40, 40);
    pdf.rect(0, 0, pageWidth, 40, 'F');
    
    pdf.setTextColor('#FFFFFF');
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Professional Proposal', pageWidth / 2, 25, { align: 'center' });
    
    yPosition = 60;
  };

  // Add section divider
  const addSectionDivider = (title: string) => {
    yPosition += 10;
    pdf.setFillColor(245, 245, 245);
    pdf.rect(margin, yPosition - 5, contentWidth, 15, 'F');
    
    pdf.setTextColor('#333333');
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text(title, margin + 5, yPosition + 5);
    
    yPosition += 20;
  };

  // Start building the PDF
  addHeader();

  // Title
  addText(proposal.jobTitle, 16, true, '#2D3748');
  addText(`Proposal Date: ${new Date(proposal.createdAt).toLocaleDateString()}`, 10, false, '#666666');
  
  if (proposal.freelancerName) {
    addText(`Prepared by: ${proposal.freelancerName}`, 10, false, '#666666');
  }

  // Cover Letter
  addSectionDivider('Cover Letter');
  addText(proposal.coverLetter, 11);

  // Milestones
  addSectionDivider('Project Milestones');
  proposal.milestones.forEach((milestone, index) => {
    addText(`${index + 1}. ${milestone.title}`, 12, true, '#2D3748');
    addText(`Duration: ${milestone.duration}`, 10, false, '#666666');
    addText('Deliverables:', 10, true);
    
    milestone.deliverables.forEach((deliverable) => {
      addText(`• ${deliverable}`, 10);
    });
    
    yPosition += 5;
  });

  // Pricing
  addSectionDivider('Investment Options');
  
  Object.entries(proposal.pricing).forEach(([tier, details]) => {
    addText(`${tier.toUpperCase()} PACKAGE - ${details.price}`, 12, true, '#2D3748');
    
    details.features.forEach((feature) => {
      addText(`✓ ${feature}`, 10);
    });
    
    yPosition += 8;
  });

  // Questions
  if (proposal.questions.length > 0) {
    addSectionDivider('Clarifying Questions');
    
    proposal.questions.forEach((question, index) => {
      addText(`${index + 1}. ${question}`, 10);
    });
  }

  // Footer
  const addFooter = () => {
    const footerY = pageHeight - 20;
    pdf.setFontSize(8);
    pdf.setTextColor('#888888');
    pdf.text('Generated by Freelancer Proposal Generator', pageWidth / 2, footerY, { align: 'center' });
  };

  // Add footer to all pages
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    addFooter();
  }

  // Generate filename
  const filename = `proposal-${proposal.jobTitle.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`;

  // Download the PDF
  pdf.save(filename);
};

export default exportProposalToPDF;
